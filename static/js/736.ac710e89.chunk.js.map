{"version":3,"file":"static/js/736.ac710e89.chunk.js","mappings":"+RAEaA,EAAWC,EAAAA,GAAAA,GAAH,uRAaRC,EAAWD,EAAAA,GAAAA,GAAH,6MAORE,EAAYF,EAAAA,GAAAA,IAAH,8DAKTG,EAAYH,EAAAA,GAAAA,EAAH,oIAQTI,EAAgBJ,EAAAA,GAAAA,EAAH,8L,mBC5BbK,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6FAChBJ,GAAW,GADK,mBAGSK,EAAAA,EAAAA,IAAaX,GAHtB,mBAIM,KADZG,EAHM,EAGNA,MACCS,OAJK,yCAKLC,EAAAA,GAAAA,KAAW,oCALN,OAOdT,EAAQD,GAPM,kDASdK,EAAS,EAAD,IACRK,EAAAA,GAAAA,MAAY,gCAVE,yBAYdP,GAAW,GAZG,6EAAH,qDAefI,MACC,CAACV,KAGF,gCACGK,IAAW,SAACS,EAAA,EAAD,KACVP,GAASJ,IACT,SAACV,EAAD,UACGU,EAAKY,KAAI,SAAAC,GAAI,OACZA,EAAKC,eACH,UAACtB,EAAD,YACE,SAACC,EAAD,CACEsB,IAAG,yCAAoCF,EAAKC,cAC5CE,IAAKH,EAAKI,QAEZ,SAACvB,EAAD,UAAYmB,EAAKI,QACjB,UAACtB,EAAD,yBAA2BkB,EAAKK,eANnBL,EAAKM,c,8ECrCrBC,E,QAAgB7B,GAAAA,IAAH,sE,SCCboB,EAAS,WACpB,OACE,SAACS,EAAD,WACE,SAAC,KAAD,CAAcC,MAAM,UAAUC,OAAQ,GAAIC,MAAO,S,0MCJvDC,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRF,IAAAA,IAAA,sCAAyCC,IADjC,cACzBE,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAe,mCAAG,WAAOC,GAAP,uFACNN,IAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDK,IAD9C,cACvBH,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfG,EAAe,mCAAG,WAAOlC,GAAP,uFACN2B,IAAAA,IAAA,iBAAoB3B,EAApB,oBAAuC4B,IADjC,cACvBE,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfpB,EAAY,mCAAG,WAAOX,GAAP,uFACH2B,IAAAA,IAAA,iBAAoB3B,EAApB,4BAA+C4B,IAD5C,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZI,EAAe,mCAAG,WAAOnC,GAAP,uFACN2B,IAAAA,IAAA,iBAAoB3B,EAApB,4BAA+C4B,IADzC,cACvBE,EADuB,yBAEtBA,EAASC,MAFa,2CAAH","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/moviesApi.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 24px);\n  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  grid-gap: 8px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItem = styled.li`\n  background-color: #fff;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const CastImage = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const ActorText = styled.p`\n  margin-bottom: 5px;\n  font-weight: 500;  \n  font-size: 14px;\n  color: #2a363b;\n  text-align: center;\n`;\n\nexport const CharacterText = styled.p`\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  font-style: italic;\n  font-weight: 400;  \n  font-size: 12px;\n  color: rgba(128, 128, 128);\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader/Loader';\nimport { CastList, CastItem, CastImage, ActorText, CharacterText } from './Cast.styled';\nimport { getMovieCast } from 'services/moviesApi';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setLoading(true);\n      try {\n        const { cast } = await getMovieCast(movieId);\n        if (cast.length === 0) {\n          return toast.info('We have no cast for this movie!');\n        }\n        setCast(cast);\n      } catch (error) {\n        setError(error);\n        toast.error('Oops!...Something went wrong');\n      } finally {\n        setLoading(false);\n      }      \n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {!error && cast && (\n        <CastList>\n          {cast.map(item => (\n            item.profile_path && (\n              <CastItem key={item.id}>\n                <CastImage\n                  src={`https://image.tmdb.org/t/p/w300${item.profile_path}`}\n                  alt={item.name}\n                />\n                <ActorText>{item.name}</ActorText>\n                <CharacterText>Character: {item.character}</CharacterText>\n              </CastItem>\n            )\n          ))}\n        </CastList>\n      )}  \n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { MutatingDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrapper>\n      <MutatingDots color=\"#00BFFF\" height={80} width={80} />\n    </LoaderWrapper>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b4f947b22bfa1d671304279be6575e1f';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getSearchMovies = async (query) => {\n  const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}`);\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieCast = async (movieId) => {\n  const response = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieReviews = async (movieId) => {\n  const response = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n  return response.data;\n};\n\n// ================================\n// список самых популярных фильмов на сегодня для создания коллекции на главной странице\n// https://api.themoviedb.org/3/trending/movie/week?api_key=b4f947b22bfa1d671304279be6575e1f\n\n// поиск кинофильма по ключевому слову на странице фильмов\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&query=query&page=1\n\n// запрос полной информации о фильме для страницы кинофильма\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>\n\n// запрос информации о актёрском составе для страницы кинофильма\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>\n\n// запрос обзоров для страницы кинофильма\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1"],"names":["CastList","styled","CastItem","CastImage","ActorText","CharacterText","Cast","movieId","useParams","useState","cast","setCast","loading","setLoading","error","setError","useEffect","fetchCast","getMovieCast","length","toast","Loader","map","item","profile_path","src","alt","name","character","id","LoaderWrapper","color","height","width","axios","API_KEY","getTrendingMovies","response","data","getSearchMovies","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}